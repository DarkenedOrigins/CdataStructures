#include <stdio.h>
#include <stdlib.h>
#include <math.h>

double abs_double(double y)
{
    //Change this to return the absolute value of y i.e |y|
  y=y*y;
  y=sqrt(y);	//|y|=sqrt(y^2)  
	return y;
}

double fx_val(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the value of the polynomial at the value x
	double f;
	f= a*pow(x,4)+b*pow(x,3)+c*pow(x,2)+d*x+e;
	return f;
}

double fx_dval(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the value of the derivative of the polynomial at the value x
    	double f;
	f=4*a*pow(x,3)+3*b*pow(x,2)+2*c*x+d;
	return f;
}

double fx_ddval(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the value of the double derivative of the polynomial at the value x
	double f;
	f=12*a*pow(x,2)+6*b*x+2*c;	
    return f;
}


double newrfind_halley(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the root found starting from the initial point x using Halley's method
	double f,g,h,j;
	f=fx_val(a,b,c,d,e,x);
	if (f=0){
		printf("Root found:%lf",&x);
	}
	while (f> || j<10000){
		f=fx_val(a,b,c,d,e,x);
		g=fx_dval(a,b,c,d,e,x);
		h=fx_ddval(a,b,c,d,e,x);

		x=x-( ( 2*f*g  ) / ( (g*g)*2-f*h  ) );
		f=fx_val(a,b,c,d,e,x);
		j++
	}
	if (j==10000){
		return 0;
	}
		printf("Root found:%lf",&x);
    return 0;
}

int rootbound(double a, double b, double c, double d, double e, double r, double l)
{
    //Change this to return the upper bound on the number of roots of the polynomial in the interval (l, r)
    return 0;
}

int main(int argc, char **argv)
{
	double a, b, c, d, e, l, r;
	FILE *in;

	if (argv[1] == NULL) {
		printf("You need an input file.\n");
		return -1;
	}
	in = fopen(argv[1], "r");
	if (in == NULL)
		return -1;
	fscanf(in, "%lf", &a);
	fscanf(in, "%lf", &b);
	fscanf(in, "%lf", &c);
	fscanf(in, "%lf", &d);
	fscanf(in, "%lf", &e);
	fscanf(in, "%lf", &l);
	fscanf(in, "%lf", &r);
    
    //The values are read into the variable a, b, c, d, e, l and r.
    //You have to find the bound on the number of roots using rootbound function.
    //If it is > 0 try to find the roots using newrfind function.
    //You may use the fval, fdval and fddval funtions accordingly in implementing the halleys's method.
    
    
    fclose(in);
    
    return 0;
}
